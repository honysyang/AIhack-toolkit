import argparse
import re
import sys
from ipaddress import ip_address
from ray.job_submission import JobSubmissionClient, JobStatus
import secrets

# Function to print a fancy banner
def print_banner():
    banner = r"""
================================================================================
               _             _____        __      
     /\       (_)           |_   _|      / _|     
    /  \   ___ _  __ _ _ __   | |  _ __ | |_ ___  
   / /\ \ / __| |/ _` | '_ \  | | | '_ \|  _/ _ \ 
  / ____ \\__ \ | (_| | | | |_| |_| | | | || (_) |
 /_/    \_\___/_|\__,_|_| |_|_____|_| |_|_| \___/ 

                                                 
        Ray Cluster Security Scanner v1.0
        
        说明：本程序当前默认适用于ray 2.9.3-2.40.0 版本
        用途：本程序主要用于检测目标ray框架是否存在未授权任意命令可执行漏洞进行安全测试
        漏洞影响：攻击者可能远程控制ray框架运行主机，执行任意操作
        技术支持：亚信安全人工智能实验室
================================================================================
    """
    print(banner)

# Check if the IP is public
def is_public_ip(ip):
    try:
        addr = ip_address(ip)
        return not addr.is_private
    except ValueError:
        print("Error: Invalid IP address.")
        sys.exit(1)

# Function to submit a job to the Ray cluster
def submit_job(url, cmd):
    try:
        client = JobSubmissionClient(url)
        # Attempt to submit a job without authentication
        job_id = client.submit_job(
            entrypoint=f"echo {cmd}",
            runtime_env={"working_dir": "./"}
        )
        return client, job_id
    except Exception as e:
        print(f"Failed to submit job: {e}")
        return None, None

# Function to check for unauthorized command execution vulnerability
def check_vulnerability(ip):
    # Default port and protocol
    port = 8265
    protocol = "http"
    
    url = f"{protocol}://{ip}:{port}"
    random_tag = secrets.token_hex(4)
    test_cmd = f"{random_tag}"
    print(f"开始检测 {url}...")

    client, job_id = submit_job(url, test_cmd)

    if job_id is None:
        print("! 未发现当前Ray框架存在目标漏洞")
        return False
    
    print("!发现当前Ray框架存在未授权任意命令可执行漏洞")
    print(f"**** 创建job(检测用例)成功，获得job_id为{job_id}。")
    print("安全建议: ")
    print("1. 立即启用Ray的认证机制，限制只有授权用户可以提交作业。")
    print("2. 确保Ray集群只在可信的网络环境中运行，避免暴露于公共网络。")
    print("3. 定期更新Ray版本，应用最新的安全补丁。")
    
    return True

# Validate the IP address
def validate_ip(ip):
    if not re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', ip):
        print("Error: IP must be in the format 'xxx.xxx.xxx.xxx'.")
        sys.exit(1)


if __name__ == "__main__":
    print_banner()

    # Parse command line arguments
    parser = argparse.ArgumentParser(description="检测Ray框架是否存在未授权命令可执行漏洞.")
    parser.add_argument("--ip", type=str, required=True, help="The IP address of the Ray cluster head node.")
    args = parser.parse_args()

    # Validate the IP address
    validate_ip(args.ip)

    # Check if the IP is public and warn if it is
    if is_public_ip(args.ip):
        print("\n警告: 检测到Ray dashboard的IP为公网IP，存在安全风险!")
        sys.exit(1)

    # Perform vulnerability check
    check_vulnerability(args.ip)
    
    
    
    # Function to check for unauthorized command execution vulnerability on a specific URL
async def check_vulnerability_url(url, random_tag, session, timeout=0.5):
    test_cmd = f"{random_tag}"
    client, job_id = await submit_job(url, test_cmd, session, timeout)

    if job_id is not None:
    	print(f"{protocol}://{ip}:{port} 存在安全风险")
    	return {
            "url": url,
            "job_id": job_id,
            "client": client
        }
    return None