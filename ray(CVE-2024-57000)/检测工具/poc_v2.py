import argparse
import re
import sys
from ipaddress import ip_address
from ray.job_submission import JobSubmissionClient, JobStatus
import secrets
import socket
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm


# Function to print a fancy banner
def print_banner():
    banner = r"""
================================================================================
               _             _____        __      
     /\       (_)           |_   _|      / _|     
    /  \   ___ _  __ _ _ __   | |  _ __ | |_ ___  
   / /\ \ / __| |/ _` | '_ \  | | | '_ \|  _/ _ \ 
  / ____ \\__ \ | (_| | | | |_| |_| | | | || (_) |
 /_/    \_\___/_|\__,_|_| |_|_____|_| |_|_| \___/ 


        Ray Cluster Security Scanner v1.0

        说明：本程序当前默认适用于ray 2.9.3-2.40.0 版本
        用途：本程序主要用于检测目标ray框架是否存在未授权任意命令可执行漏洞进行安全测试
        漏洞影响：攻击者可能远程控制ray框架运行主机，执行任意操作
        技术支持：亚信安全人工智能实验室
================================================================================
    """
    print(banner)


# Check if the IP is public
def is_public_ip(ip):
    try:
        addr = ip_address(ip)
        return not addr.is_private
    except ValueError:
        print("Error: Invalid IP address.")
        sys.exit(1)


# Function to submit a job to the Ray cluster
def submit_job(url, cmd):
    try:
        client = JobSubmissionClient(url)
        # Attempt to submit a job without authentication
        job_id = client.submit_job(
            entrypoint=f"echo {cmd}",
            runtime_env={"working_dir": "./"}
        )
        return client, job_id
    except Exception as e:
        # print(f"Failed to submit job: {e}")
        return None, None


# Function to check for unauthorized command execution vulnerability
def check_vulnerability(ip, port):
    protocol = "http"
    url = f"{protocol}://{ip}:{port}"
    random_tag = secrets.token_hex(4)
    test_cmd = f"{random_tag}"
    # print(f"\n开始检测 {url}...")  # Add a newline to separate from the progress bar

    client, job_id = submit_job(url, test_cmd)

    if job_id is None:
        print(f"! 扫描到端口{port}开放, 检测{url}未发现当前Ray框架存在目标漏洞")
        return False

    print(f"! 扫描到端口{port}开放, 检测{url}.....")
    print(f"! 发现当前Ray框架在端口 {port} 存在未授权任意命令可执行漏洞")
    print(f"**** 创建job(检测用例)成功，获得job_id为{job_id}。")
    print("安全建议: ")
    print("1. 立即启用Ray的认证机制，限制只有授权用户可以提交作业。")
    print("2. 确保Ray集群只在可信的网络环境中运行，避免暴露于公共网络。")
    print("3. 定期更新Ray版本，应用最新的安全补丁。")

    return True


# Validate the IP address
def validate_ip(ip):
    if not re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', ip):
        print("Error: IP must be in the format 'xxx.xxx.xxx.xxx'.")
        sys.exit(1)


# Check if a port is open on the given IP
def is_port_open(ip, port):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.settimeout(1)  # 设置超时时间
        result = sock.connect_ex((ip, port))
        return result == 0


# Scan for available ports on the given IP using multithreading with a progress bar
def scan_ports(ip, ports_to_scan, max_workers=10):
    found = False
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {executor.submit(is_port_open, ip, port): port for port in ports_to_scan}
        total_ports = len(ports_to_scan)
        completed_ports = 0
        cycle_length = 20

        with tqdm(total=total_ports, desc="Scanning", unit="port", ncols=80, bar_format='{l_bar}{bar}|', ascii=False,
                  dynamic_ncols=True) as pbar:
            for future in as_completed(futures):
                port = futures[future]
                try:
                    if future.result():
                        if check_vulnerability(ip, port):
                            found = True
                            break
                except Exception as exc:
                    print(f"Port {port} generated an exception: {exc}")
                finally:
                    completed_ports += 1
                    pbar.update(1)  # Update the progress bar

    return found


if __name__ == "__main__":
    print_banner()

    # Parse command line arguments
    parser = argparse.ArgumentParser(description="检测Ray框架是否存在未授权命令可执行漏洞.")
    parser.add_argument("--ip", type=str, required=True, help="The IP address of the Ray cluster head node.")
    parser.add_argument("--port", type=int, default=None,
                        help="The port of the Ray dashboard service. If not provided, all common ports will be scanned.")
    parser.add_argument("--all-ports", action='store_true', help="Scan all ports from 1 to 65535.")
    args = parser.parse_args()

    # Validate the IP address
    validate_ip(args.ip)

    # Check if the IP is public and warn if it is
    if is_public_ip(args.ip):
        print("\n警告: 检测到Ray dashboard的IP为公网IP，存在安全风险!")
        sys.exit(1)

    # Perform vulnerability check
    if args.port is not None:
        check_vulnerability(args.ip, args.port)
    else:
        if args.all_ports:
            ports_to_scan = range(1, 65536)  # All possible ports
        else:
            # Default ports to scan can be extended or modified as needed
            common_ports = [8265, 10000, 80, 443, 8080, 9090]  # Add more ports as necessary
            ports_to_scan = common_ports

        if not scan_ports(args.ip, ports_to_scan):
            print("No open Ray services or vulnerabilities were found within the specified port range.")