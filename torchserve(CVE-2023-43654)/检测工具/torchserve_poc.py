import requests
import subprocess
import sys
import pkg_resources

# 定义 TorchServe 的 URL
TORCHSERVE_URL = "http://127.0.0.1:8080"
TORCHSERVE_MANAGEMENT_URL = "http://127.0.0.1:8081"

def display_banner():
    banner = r"""
================================================================================
    
      _____ _          ____             _     _         ____            _            
     / ____| |        / __ \           (_)   | |       / __ \          | |           
    | |  __| | __ _  | |  | |_ __ ___   _ ___| |_     | |  | | ___  ___| | ___  _ __ 
    | | |_ | |/ _` | | |  | | '__/ _ \ | / __| __|    | |  | |/ _ \/ __| |/ _ \| '__|
    | |__| | | (_| | | |__| | | |  __/_| \__ \ |_     | |__| |  __/\__ \ | (_) | |   
     \_____|_|\__,_|  \____/|_|  \___(_)_|___/\__|     \____/ \___||___/_|\___/|_|   
                                                                                     
    TorchServe 框架安全检测工具 v1.0
    安全风险：
        1. 攻击者可实现模型置换
        2. 攻击者可实现完成控制框架主机
    技术支持：亚信安全人工智能实验室
    
================================================================================
    """


    print(banner)



def check_torchserve_version():
    try:
        # 获取当前安装的 TorchServe 版本
        torchserve_version = pkg_resources.get_distribution('torchserve').version
        #print(f" 检测到当前安装的 TorchServe 版本: {torchserve_version}")
        
        # 检查版本是否低于 0.8.1
        if pkg_resources.parse_version(torchserve_version) < pkg_resources.parse_version('0.8.2'):
            print("检测到当前环境中的TorchServe 可能存在安全风险，特征如下：\n")
            print(f"**** 当前 TorchServe 版本为{torchserve_version}，版本较低。")
        else:
            print("[+] 当前环境未检出到对应漏洞。")
    except pkg_resources.DistributionNotFound:
        print("[!] 未找到 TorchServe 安装包。请确保 TorchServe 已安装。")
    except Exception as e:
        print(f"[!] 检查 TorchServe 版本时发生错误: {str(e)}")


def check_torchserve_api():
    try:
        # 检查模型管理 API 是否可用
        response = requests.get(f"{TORCHSERVE_MANAGEMENT_URL}/models")
        if response.status_code == 200:
            print("**** 探测到 TorchServe 管理接口可利用，可能存在安全风险。")
        else:
            pass
    except requests.exceptions.RequestException as e:
        print(f"[!] 访问 TorchServe 管理 API 时发生错误: {str(e)}")

    try:
        # 检查模型推理 API 是否可用
        response = requests.get(f"{TORCHSERVE_URL}/ping")
        if response.status_code == 200:
            print("**** 探测到 TorchServe 推理 API，可能存在安全风险。")
        else:
            pass
    except requests.exceptions.RequestException as e:
        print(f"[!] 访问 TorchServe 推理 API 时发生错误: {str(e)}")


def main():
    display_banner()
    check_torchserve_version()
    check_torchserve_api()

if __name__ == "__main__":
    main()